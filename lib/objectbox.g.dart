// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'db/account_dao.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6854043299320459793),
      name: 'AccountDao',
      lastPropertyId: const obx_int.IdUid(11, 1607894232329318001),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3035233467777186375),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3497189419651167721),
            name: 'accountId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5332146042250451706),
            name: 'date',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3982132570589155647),
            name: 'price',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2869628002054767618),
            name: 'dealType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6087714232829139157),
            name: 'modifyDate',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3922491675068585601),
            name: 'remark',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 903903584755751202),
            name: 'platformType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1607894232329318001),
            name: 'platformName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 6854043299320459793),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [7560239228901967471, 500484204116905958],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AccountDao: obx_int.EntityDefinition<AccountDao>(
        model: _entities[0],
        toOneRelations: (AccountDao object) => [],
        toManyRelations: (AccountDao object) => {},
        getId: (AccountDao object) => object.id,
        setId: (AccountDao object, int id) {
          object.id = id;
        },
        objectToFB: (AccountDao object, fb.Builder fbb) {
          final dateOffset = fbb.writeString(object.date);
          final priceOffset = fbb.writeString(object.price);
          final modifyDateOffset = object.modifyDate == null
              ? null
              : fbb.writeString(object.modifyDate!);
          final remarkOffset =
              object.remark == null ? null : fbb.writeString(object.remark!);
          final platformNameOffset = fbb.writeString(object.platformName);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(3, object.accountId);
          fbb.addOffset(4, dateOffset);
          fbb.addOffset(5, priceOffset);
          fbb.addInt64(6, object.dealType);
          fbb.addOffset(7, modifyDateOffset);
          fbb.addOffset(8, remarkOffset);
          fbb.addInt64(9, object.platformType);
          fbb.addOffset(10, platformNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final accountIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final dateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final priceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final dealTypeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final modifyDateParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final remarkParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final platformTypeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final platformNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final object = AccountDao(
              id: idParam,
              accountId: accountIdParam,
              date: dateParam,
              price: priceParam,
              dealType: dealTypeParam,
              modifyDate: modifyDateParam,
              remark: remarkParam,
              platformType: platformTypeParam,
              platformName: platformNameParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AccountDao] entity fields to define ObjectBox queries.
class AccountDao_ {
  /// See [AccountDao.id].
  static final id =
      obx.QueryIntegerProperty<AccountDao>(_entities[0].properties[0]);

  /// See [AccountDao.accountId].
  static final accountId =
      obx.QueryIntegerProperty<AccountDao>(_entities[0].properties[1]);

  /// See [AccountDao.date].
  static final date =
      obx.QueryStringProperty<AccountDao>(_entities[0].properties[2]);

  /// See [AccountDao.price].
  static final price =
      obx.QueryStringProperty<AccountDao>(_entities[0].properties[3]);

  /// See [AccountDao.dealType].
  static final dealType =
      obx.QueryIntegerProperty<AccountDao>(_entities[0].properties[4]);

  /// See [AccountDao.modifyDate].
  static final modifyDate =
      obx.QueryStringProperty<AccountDao>(_entities[0].properties[5]);

  /// See [AccountDao.remark].
  static final remark =
      obx.QueryStringProperty<AccountDao>(_entities[0].properties[6]);

  /// See [AccountDao.platformType].
  static final platformType =
      obx.QueryIntegerProperty<AccountDao>(_entities[0].properties[7]);

  /// See [AccountDao.platformName].
  static final platformName =
      obx.QueryStringProperty<AccountDao>(_entities[0].properties[8]);
}
